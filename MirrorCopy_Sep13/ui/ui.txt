import { createNodeIcon } from '../shape-library.js';

let currentSkuId = null;
let isDemandSku = false;

// This helper function creates the popup for managing columns
function createColumnManagerPopup(table, settingsButton) {
    // Close any existing popups first
    document.querySelectorAll('.column-manager-popup').forEach(p => p.remove());

    const popup = document.createElement('div');
    popup.className = 'column-manager-popup';
    
    // Temporarily append to measure its width, then position it
    popup.style.visibility = 'hidden';
    document.body.appendChild(popup);
    const popupWidth = popup.offsetWidth;
    
    const btnRect = settingsButton.getBoundingClientRect();
    let leftPos = btnRect.right + window.scrollX - popupWidth;
    if (leftPos < 10) { // Check if it's going off the left edge
        leftPos = 10;
    }
    popup.style.top = `${btnRect.bottom + window.scrollY + 5}px`;
    popup.style.left = `${leftPos}px`;
    popup.style.visibility = 'visible';

    popup.innerHTML = `<h4>Configure Columns</h4>`;
    const list = document.createElement('ul');

    let draggedItem = null;

    table.getColumns().forEach(column => {
        const item = document.createElement('li');
        item.draggable = true;
        item.dataset.field = column.getField();

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = column.isVisible();
        checkbox.onchange = () => {
            if (checkbox.checked) {
                column.show();
            } else {
                column.hide();
            }
        };

        const label = document.createElement('span');
        label.textContent = column.getDefinition().title;
        
        item.appendChild(checkbox);
        item.appendChild(label);
        list.appendChild(item);

        // Drag and Drop events for reordering
        item.addEventListener('dragstart', () => {
            draggedItem = item;
            setTimeout(() => item.classList.add('dragging'), 0);
        });
        item.addEventListener('dragend', () => {
            setTimeout(() => {
                draggedItem.classList.remove('dragging');
                draggedItem = null;
            }, 0);
        });
        item.addEventListener('dragover', (e) => {
            e.preventDefault();
            const afterElement = [...list.querySelectorAll('li:not(.dragging)')].reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = e.clientY - box.top - box.height / 2;
                return (offset < 0 && offset > closest.offset) ? { offset: offset, element: child } : closest;
            }, { offset: Number.NEGATIVE_INFINITY }).element;
            
            if (afterElement == null) {
                list.appendChild(draggedItem);
            } else {
                list.insertBefore(draggedItem, afterElement);
            }
            
            const originalColumnDefs = table.getColumnDefinitions();
            const columnDefMap = originalColumnDefs.reduce((map, col) => {
                map[col.field] = col;
                return map;
            }, {});
            
            const newOrderOfFields = [...list.querySelectorAll('li')].map(li => li.dataset.field);
            const newColumnDefs = newOrderOfFields.map(field => columnDefMap[field]);

            table.setColumns(newColumnDefs);
        });
    });

    popup.appendChild(list);

    // Close popup if clicking outside
    setTimeout(() => {
        document.addEventListener('click', function closeHandler(e) {
            if (!popup.contains(e.target) && e.target !== settingsButton) {
                popup.remove();
                document.removeEventListener('click', closeHandler);
            }
        });
    }, 0);
}

// Reverted modal to simple HTML table for clarity and performance in the small popup
function handleGraphClick(params, nodes, edges) {
    const nodePropertiesModal = document.getElementById('node-properties-modal');
    const nodePropertiesTitle = document.getElementById('node-properties-title');
    const nodePropertiesContent = document.getElementById('node-properties-content');
    
    let clickedItem = null;
    let itemType = '';
    if (params.nodes.length > 0) {
        clickedItem = nodes.get(params.nodes[0]);
        itemType = clickedItem.nodeName || 'Node';
    } else if (params.edges.length > 0) {
        clickedItem = edges.get(params.edges[0]);
        itemType = 'Relationship';
    }
    if (clickedItem) {
        const properties = JSON.parse(clickedItem.title);
        nodePropertiesTitle.textContent = `Properties for ${itemType}`;
        nodePropertiesContent.innerHTML = ''; // Clear previous
        const table = document.createElement('table');
        const tableBody = document.createElement('tbody');
        tableBody.innerHTML = Object.entries(properties).map(([key, value]) => `<tr><td class="font-semibold text-gray-600 pr-4 align-top">${key.replace(/_/g, ' ')}</td><td class="text-gray-800 break-all">${value}</td></tr>`).join('');
        table.appendChild(tableBody);
        nodePropertiesContent.appendChild(table);
        nodePropertiesModal.classList.remove('hidden');
    }
}

export function renderNetworkGraph(id, networkData, graphType, targetContainer, shortestPathData = null) {
    if (!networkData || networkData.length === 0) {
        targetContainer.innerHTML += '<p class="text-gray-500">No network data found.</p>';
        return;
    }
    const container = document.createElement('div');
    container.id = 'network-container';
    targetContainer.appendChild(container);
    
    const nodes = new vis.DataSet();
    const edges = new vis.DataSet();
    const uniqueNodeIds = new Set();
    const shortestPathEdgeIds = new Set(shortestPathData ? shortestPathData.flatMap(p => p.relationships).map(r => r.id) : []);

    networkData.forEach(path => {
        path.nodes.forEach(node => {
            if (!uniqueNodeIds.has(node.id)) {
                uniqueNodeIds.add(node.id);
                const icon = createNodeIcon(node);
                nodes.add({
                    id: node.id,
                    label: node.properties.sku_id || node.properties.item || node.properties.res_id || node.properties.bom_num,
                    nodeName: node.properties.sku_id || node.properties.item || node.properties.res_id || node.properties.bom_num,
                    title: JSON.stringify(node.properties, null, 2),
                    shape: 'image',
                    image: icon.image,
                    size: icon.size,
                    font: {
                        size: 12,
                        color: '#4b5563',
                        vadjust: icon.vadjust
                    }
                });
            }
        });
        path.relationships.forEach(rel => {
            let edgeOptions = { from: rel.startNode, to: rel.endNode, title: JSON.stringify(rel.properties, null, 2), arrows: 'to', color: { color: '#6b7280' } };
            if (shortestPathEdgeIds.has(rel.id)) { edgeOptions.color = 'gold'; edgeOptions.width = 3; }
            if (rel.type === 'SOURCING') { edgeOptions.arrows = { to: { enabled: true }, middle: { enabled: true, type: 'image', imageWidth: 20, imageHeight: 20, src: 'images/sourcing_relation.png' } }; }
            else if (rel.type !== 'CONSUMED_BY' && rel.type !== 'PRODUCES') { edgeOptions.label = rel.type; edgeOptions.font = { size: 10, color: '#6b7280', align: 'middle', strokeWidth: 5, strokeColor: '#ffffff' }; }
            edges.add(edgeOptions);
        });
    });
    
    const network = new vis.Network(container, { nodes, edges }, {
        nodes: { 
            font: { size: 12, color: '#4b5563' },
            borderWidth: 0, 
            shapeProperties: { useImageSize: true } 
        },
        edges: { color: { highlight: '#3b82f6' }, smooth: { enabled: true, type: 'straightCross' } },
        physics: { enabled: false },
        layout: { hierarchical: { direction: 'LR', sortMethod: 'directed', levelSeparation: 300, nodeSpacing: 150 } },
        interaction: { navigationButtons: true, keyboard: true }
    });
    network.on('click', (params) => handleGraphClick(params, nodes, edges));
}

function fetchNetworkGraph(skuId, graphType, container) { 
    fetch('http://127.0.0.1:5000/api/network-graph', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ sku_id: skuId }) })
    .then(r => r.json())
    .then(d => renderNetworkGraph(skuId, d, graphType, container, null)); 
}
function fetchNetworkWithShortestPath(skuId, graphType, container) { 
    fetch('http://127.0.0.1:5000/api/network-with-shortest-path', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ sku_id: skuId }) })
    .then(r => r.json())
    .then(d => renderNetworkGraph(skuId, d.full_network, graphType, container, d.shortest_path)); 
}
export function fetchResourceNetworkGraph(resId, graphType, container) { 
    fetch('http://127.0.0.1:5000/api/resource-network', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ res_id: resId }) })
    .then(r => r.json())
    .then(d => renderNetworkGraph(resId, d, graphType, container)); 
}

// ## MODIFICATION START ##
// Rewritten to use the user's preferred default column sequence.
function displaySkuProperties(properties) {
    const skuPropertiesDisplay = document.getElementById('sku-properties-display');
    skuPropertiesDisplay.innerHTML = ''; // Clear previous content

    const header = document.createElement('div');
    header.className = 'flex justify-between items-center mb-4';
    const titleEl = document.createElement('h3');
    titleEl.className = 'text-lg font-semibold';
    titleEl.textContent = "SKU Properties";
    const settingsButton = document.createElement('button');
    settingsButton.className = 'flex items-center p-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors';
    settingsButton.title = 'Configure Columns';
    settingsButton.innerHTML = `<i class="fas fa-cog"></i>`;
    header.appendChild(titleEl);
    header.appendChild(settingsButton);
    skuPropertiesDisplay.appendChild(header);

    const tableContainer = document.createElement('div');
    tableContainer.className = 'tabulator-creative';
    skuPropertiesDisplay.appendChild(tableContainer);

    // Define the preferred column order
    const preferredOrder = ['item', 'loc', 'demand_sku', 'bottleneck', 'broken_bom', 'cust_demand_qty', 'fcst_demand_qty', 'total_demand_qty', 'infinite_supply', 'shortest_lead_time', 'overloaded_res_count'];
    
    const allKeys = Object.keys(properties);
    const preferredKeysInOrder = preferredOrder.filter(key => allKeys.includes(key));
    const remainingKeys = allKeys
        .filter(key => !preferredOrder.includes(key))
        .sort((a, b) => a.localeCompare(b));
    
    const finalKeyOrder = [...preferredKeysInOrder, ...remainingKeys];

    const columns = finalKeyOrder.map(key => ({
        title: key.replace(/_/g, ' '),
        field: key,
        headerHozAlign: "center",
        hozAlign: "center",
        resizable: true,
        headerSort: false, 
    }));

    const table = new Tabulator(tableContainer, {
        data: [properties],
        columns: columns,
        layout: "fitDataStretch",
        classes: "tabulator-creative",
    });

    settingsButton.onclick = (e) => {
        e.stopPropagation();
        createColumnManagerPopup(table, settingsButton);
    };

    skuPropertiesDisplay.classList.remove('hidden');
}

// New helper function to create a header with a back button for the network view
function createBomViewerHeader(title, backFunction) {
    const header = document.createElement('div');
    header.className = 'flex justify-between items-center mb-4';
    
    const titleEl = document.createElement('h2');
    titleEl.className = 'text-xl font-bold text-gray-800';
    titleEl.textContent = title;
    
    const backButton = document.createElement('button');
    backButton.className = 'flex items-center p-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors';
    backButton.title = 'Back to SKU Properties';
    backButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3" /></svg>`;
    backButton.addEventListener('click', backFunction);
    
    header.appendChild(titleEl);
    header.appendChild(backButton);
    return header;
}
// ## MODIFICATION END ##

function fetchAndDisplaySkuDetails(skuId) {
    const skuPropertiesDisplay = document.getElementById('sku-properties-display');
    const getNetworkBtn = document.getElementById('get-network-btn');
    
    // Clear any existing graph when fetching new details
    const oldGraphContainer = document.getElementById('bom-viewer-graph-container');
    if (oldGraphContainer) oldGraphContainer.remove();
    
    fetch('http://127.0.0.1:5000/api/sku-details', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ sku_id: skuId }) })
    .then(response => response.json())
    .then(details => {
        skuPropertiesDisplay.innerHTML = '';
        currentSkuId = null;
        isDemandSku = false;

        getNetworkBtn.disabled = true;
        getNetworkBtn.className = 'px-4 py-1 bg-gray-300 text-gray-800 text-sm font-semibold rounded-lg transition-colors disabled:opacity-50 flex-shrink-0 whitespace-nowrap';

        if (details.found) {
            currentSkuId = skuId;
            isDemandSku = details.properties.demand_sku === true;
            displaySkuProperties(details.properties);
            getNetworkBtn.disabled = false;
            getNetworkBtn.className = 'px-4 py-1 bg-green-600 text-white hover:bg-green-700 text-sm font-semibold rounded-lg transition-colors flex-shrink-0 whitespace-nowrap';
        } else {
            skuPropertiesDisplay.innerHTML = `<p class="text-red-500 p-4">SKU ID '${skuId}' not found.</p>`;
            skuPropertiesDisplay.classList.remove('hidden');
        }
    })
    .catch(error => console.error('Error fetching SKU details:', error));
}

export function initBomViewer() {
    const getSkuDetailsBtn = document.getElementById('get-sku-details-btn');
    const itemInput = document.getElementById('item-input');
    const locInput = document.getElementById('loc-input');
    const getNetworkBtn = document.getElementById('get-network-btn');
    const bomViewerWrapper = document.getElementById('bom-viewer-wrapper');
    const nodePropertiesModal = document.getElementById('node-properties-modal');
    const closePropertiesModalBtn = nodePropertiesModal.querySelector('.close-properties-modal');

    getSkuDetailsBtn.addEventListener('click', () => {
        const skuId = `${itemInput.value.trim()}@${locInput.value.trim()}`;
        if (itemInput.value.trim() && locInput.value.trim()) {
            fetchAndDisplaySkuDetails(skuId);
        } else {
            alert('Please enter both an Item and a Location.');
        }
    });

    getNetworkBtn.addEventListener('click', () => {
        if (currentSkuId) {
            document.getElementById('sku-properties-display').classList.add('hidden');
            const oldGraphContainer = document.getElementById('bom-viewer-graph-container');
            if (oldGraphContainer) oldGraphContainer.remove();
            
            const graphContainer = document.createElement('div');
            graphContainer.id = 'bom-viewer-graph-container';
            graphContainer.classList.add('w-full', 'mt-4');
            
            const networkTitle = `Network for ${currentSkuId}`;
            const backFunction = () => fetchAndDisplaySkuDetails(currentSkuId);
            
            graphContainer.appendChild(createBomViewerHeader(networkTitle, backFunction));
            bomViewerWrapper.appendChild(graphContainer);
            
            if (isDemandSku) {
                fetchNetworkWithShortestPath(currentSkuId, networkTitle, graphContainer);
            } else {
                fetchNetworkGraph(currentSkuId, networkTitle, graphContainer);
            }
        }
    });
    
    closePropertiesModalBtn.addEventListener('click', () => nodePropertiesModal.classList.add('hidden'));
    nodePropertiesModal.addEventListener('click', (event) => {
        if (event.target === nodePropertiesModal) nodePropertiesModal.classList.add('hidden');
    });
}
let currentChatId = null;

function getChatHistory() { return JSON.parse(localStorage.getItem('chatHistory') || '[]'); }
function saveChatHistory(history) { localStorage.setItem('chatHistory', JSON.stringify(history)); }

function showThinkingIndicator() {
    const chatLog = document.getElementById('chat-log');
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('self-start');
    const loader = document.createElement('div');
    loader.className = 'eleva-loader';
    const svgRing = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svgRing.setAttribute('class', 'eleva-ring');
    svgRing.setAttribute('viewBox', '0 0 50 50');
    svgRing.innerHTML = `<defs><linearGradient id="elevaGradient" x1="0%" y1="0%" x2="100%" y2="0%"><stop offset="0%" stop-color="#0096C7"/><stop offset="40%" stop-color="#48CAE4"/><stop offset="70%" stop-color="#90E0EF"/><stop offset="100%" stop-color="#CAF0F8"/></linearGradient></defs><circle class="path" cx="25" cy="25" r="20" fill="none" stroke="url(#elevaGradient)" stroke-width="4"/>`;
    const icon = document.createElement('img');
    icon.className = 'eleva-icon';
    icon.src = 'images/ElevaAI_short_logo.svg';
    icon.alt = 'Eleva AI';
    loader.appendChild(svgRing);
    loader.appendChild(icon);
    messageDiv.appendChild(loader);
    chatLog.appendChild(messageDiv);
    chatLog.scrollTop = chatLog.scrollHeight;
    return messageDiv;
}

// ## MODIFICATION START ##
function addMessageToLog(message, sender) {
    const chatLog = document.getElementById('chat-log');
    const messageContainer = document.createElement('div');
    messageContainer.classList.add('p-3', 'rounded-lg', 'max-w-xs', 'lg:max-w-4xl', 'break-words');
    messageContainer.classList.add(sender === 'user' ? 'user-message' : 'assistant-message');

    if (sender === 'assistant') {
        // Use Marked to parse Markdown and DOMPurify to sanitize the result for security
        const dirtyHtml = marked.parse(message);
        messageContainer.innerHTML = DOMPurify.sanitize(dirtyHtml);
    } else {
        // User messages are always plain text
        messageContainer.textContent = message;
    }
    
    chatLog.appendChild(messageContainer);
    chatLog.scrollTop = chatLog.scrollHeight;
}
// ## MODIFICATION END ##

function handleChatSubmit(renderChatHistoryFunc) {
    const chatInput = document.getElementById('chat-input');
    const chatWelcome = document.getElementById('chat-welcome');
    const chatLog = document.getElementById('chat-log');
    const chatSection = document.getElementById('chat-section');

    const userMessage = chatInput.value.trim();
    if (!userMessage) return;
    
    chatWelcome.classList.add('hidden');
    chatLog.classList.remove('hidden');
    chatSection.classList.remove('is-new-chat');
    addMessageToLog(userMessage, 'user');
    chatInput.value = '';
    const thinkingIndicator = showThinkingIndicator();
    
    let history = getChatHistory();
    let currentChat;

    if (currentChatId === null) {
        currentChatId = `chat-${new Date().getTime()}`;
        const newChat = { 
            id: currentChatId, 
            title: userMessage.substring(0, 30) + (userMessage.length > 30 ? '...' : ''), 
            messages: [{ sender: 'user', text: userMessage }] 
        };
        history.unshift(newChat);
        currentChat = newChat;
        renderChatHistoryFunc();
    } else {
        currentChat = history.find(c => c.id === currentChatId);
        if (currentChat) {
            currentChat.messages.push({ sender: 'user', text: userMessage });
        }
    }
    saveChatHistory(history); 

    const historyForApi = currentChat.messages
        .slice(0, -1) 
        .map(msg => ({
            role: msg.sender === 'user' ? 'user' : 'model',
            parts: [{ text: msg.text }]
        }));

    fetch('http://127.0.0.1:5000/api/chat', { 
        method: 'POST', 
        headers: { 'Content-Type': 'application/json' }, 
        body: JSON.stringify({ 
            message: userMessage, 
            history: historyForApi
        })
    })
    .then(response => response.json())
    .then(data => {
        thinkingIndicator.remove();
        const assistantMessageText = data.data || data.response;
        addMessageToLog(assistantMessageText, 'assistant');

        if (currentChat) {
            currentChat.messages.push({ sender: 'assistant', text: assistantMessageText, data: data });
            saveChatHistory(history); 
        }
    })
    .catch(error => {
        thinkingIndicator.remove();
        console.error('Error with chat API:', error);
        addMessageToLog('Sorry, I had trouble connecting.', 'assistant');
    });
}

function deleteChat(chatId, renderChatHistoryFunc) {
    let history = getChatHistory();
    saveChatHistory(history.filter(chat => chat.id !== chatId));
    renderChatHistoryFunc();
    if (currentChatId === chatId) startNewChat();
}

function loadChat(chatId, showChatView) {
    const chatLog = document.getElementById('chat-log');
    const chatWelcome = document.getElementById('chat-welcome');
    const chatSection = document.getElementById('chat-section');
    const chat = getChatHistory().find(c => c.id === chatId);
    if (chat) {
        currentChatId = chatId;
        chatLog.innerHTML = '';
        chat.messages.forEach(msg => addMessageToLog(msg.text, msg.sender, msg.data));
        chatWelcome.classList.add('hidden');
        chatLog.classList.remove('hidden');
        chatSection.classList.remove('is-new-chat');
        showChatView();
    }
}

export function startNewChat() {
    const chatLog = document.getElementById('chat-log');
    const chatWelcome = document.getElementById('chat-welcome');
    const chatSection = document.getElementById('chat-section');
    currentChatId = null;
    chatLog.innerHTML = '';
    chatLog.classList.add('hidden');
    chatWelcome.classList.remove('hidden');
    chatSection.classList.add('is-new-chat');
}

function renderChatHistory(showChatView) {
    const chatHistoryList = document.getElementById('chat-history-list');
    const history = getChatHistory();
    chatHistoryList.innerHTML = '';
    history.forEach(chat => {
        const historyItem = document.createElement('div');
        historyItem.classList.add('group', 'flex', 'items-center', 'justify-between', 'p-2', 'text-sm', 'hover:bg-gray-300', 'rounded', 'cursor-pointer');
        historyItem.setAttribute('data-chat-id', chat.id);
        historyItem.addEventListener('click', () => loadChat(chat.id, showChatView));
        const title = document.createElement('span');
        title.classList.add('truncate');
        title.textContent = chat.title;
        const deleteBtn = document.createElement('button');
        deleteBtn.classList.add('opacity-0', 'group-hover:opacity-100', 'p-1', 'rounded-md', 'hover:bg-gray-400', 'z-10');
        deleteBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>`;
        deleteBtn.addEventListener('click', (event) => { 
            event.stopPropagation(); 
            deleteChat(chat.id, () => renderChatHistory(showChatView)); 
        });
        historyItem.appendChild(title);
        historyItem.appendChild(deleteBtn);
        chatHistoryList.appendChild(historyItem);
    });
}

export function initChat(showChatView) {
    const chatInput = document.getElementById('chat-input');
    const chatSendBtn = document.getElementById('chat-send-btn');
    
    chatSendBtn.addEventListener('click', () => handleChatSubmit(() => renderChatHistory(showChatView)));
    chatInput.addEventListener('keydown', (event) => { 
        if (event.key === 'Enter') handleChatSubmit(() => renderChatHistory(showChatView)); 
    });
    
    renderChatHistory(showChatView);
}
// ## MODIFICATION START ## - Entire file updated for final UI enhancements

// Helper to create a header with a title for drill-down views
function createCaHeader(title) {
    const titleEl = document.createElement('h2');
    titleEl.className = 'text-xl font-bold text-gray-800 mb-4 px-2';
    titleEl.textContent = title;
    return titleEl;
}


// --- Functions to render drill-down content ---

function renderOrderSearchUI() {
    const resultsContainer = document.getElementById('ca-results-container');
    resultsContainer.innerHTML = ''; 

    resultsContainer.appendChild(createCaHeader("Order Search"));

    const searchContainer = document.createElement('div');
    searchContainer.className = 'px-2';
    searchContainer.innerHTML = `
        <div class="bg-white rounded-xl shadow-lg p-4">
            <div class="flex items-center space-x-2">
                <input type="text" id="ca-order-search-input-internal" placeholder="Enter Order ID or Seqnum..." class="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <button id="ca-order-search-btn-internal" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors flex-shrink-0">
                    <i class="fas fa-search"></i>
                    <span class="ml-2">Analyze</span>
                </button>
            </div>
        </div>
        <div id="ca-order-results-container-internal" class="hidden mt-6 space-y-6">
            <div class="bg-white rounded-xl shadow-lg p-4">
                <h3 class="text-lg font-semibold text-gray-800 mb-2">Order Details</h3>
                <div id="ca-order-details-internal"></div>
            </div>
            <div class="bg-white rounded-xl shadow-lg p-4">
                <h3 class="text-lg font-semibold text-gray-800 mb-2">Linked Constraints</h3>
                <div id="ca-order-constraints-internal"></div>
            </div>
        </div>
    `;
    resultsContainer.appendChild(searchContainer);

    // Wire up the new search button
    const searchBtn = document.getElementById('ca-order-search-btn-internal');
    const searchInput = document.getElementById('ca-order-search-input-internal');
    searchBtn.addEventListener('click', () => handleOrderSearchInternal());
    searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') handleOrderSearchInternal();
    });
}

async function handleOrderSearchInternal() {
    const input = document.getElementById('ca-order-search-input-internal');
    const resultsContainer = document.getElementById('ca-order-results-container-internal');
    const detailsContainer = document.getElementById('ca-order-details-internal');
    const constraintsContainer = document.getElementById('ca-order-constraints-internal');
    const searchBtn = document.getElementById('ca-order-search-btn-internal');
    
    const orderId = input.value.trim();
    if (!orderId) return;

    searchBtn.disabled = true;
    searchBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span class="ml-2">Analyzing...</span>`;
    resultsContainer.classList.add('hidden');
    
    try {
        const response = await fetch('/api/constraints/order-search', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId: orderId })
        });
        const data = await response.json();
        renderOrderDetails(data.orderDetails, detailsContainer);
        renderConstraintList(data.constraints, constraintsContainer);
        resultsContainer.classList.remove('hidden');
    } catch (error) {
        console.error("Error fetching order constraints:", error);
        detailsContainer.innerHTML = `<p class="text-red-500">An error occurred while fetching data.</p>`;
    } finally {
        searchBtn.disabled = false;
        searchBtn.innerHTML = `<i class="fas fa-search"></i><span class="ml-2">Analyze</span>`;
    }
}

async function renderImpactedDemandsTable() {
    const resultsContainer = document.getElementById('ca-results-container');
    resultsContainer.innerHTML = '';

    resultsContainer.appendChild(createCaHeader("Impacted Demands"));
    
    const contentContainer = document.createElement('div');
    contentContainer.className = 'px-2';
    resultsContainer.appendChild(contentContainer);

    contentContainer.innerHTML = `<div class="flex justify-center items-center p-8"><i class="fas fa-spinner fa-spin fa-2x text-gray-400"></i></div>`;

    try {
        const response = await fetch('/api/constraints/impacted-demands');
        const data = await response.json();
        contentContainer.innerHTML = '';
        
        if (!data || data.length === 0) {
            contentContainer.innerHTML = `<p class="text-gray-500">No impacted demands found.</p>`;
            return;
        }

        const tableContainer = document.createElement('div');
        tableContainer.className = 'tabulator-creative';
        contentContainer.appendChild(tableContainer);

        new Tabulator(tableContainer, {
            data: data,
            layout: "fitDataStretch",
            rowFormatter: function(row) {
                const data = row.getData();
                const constraints = data.constraints;
                const rowElement = row.getElement();

                if (constraints && constraints.length > 0) {
                    const detailElement = document.createElement("div");
                    detailElement.classList.add("hidden", "p-4", "bg-gray-50", "border-t");
                    let html = '<ul class="space-y-2 list-disc list-inside">';
                    constraints.forEach(c => {
                        const utilPercent = (c.utilization * 100).toFixed(0);
                        html += `<li class="text-sm text-gray-700">Resource <code class="bg-gray-200 p-1 rounded">${c.resourceId}</code> was <strong>${utilPercent}% utilized</strong> in Week ${c.week}.</li>`;
                    });
                    html += '</ul>';
                    detailElement.innerHTML = html;
                    rowElement.appendChild(detailElement);
                    
                    const cellEl = row.getCell("constraints");
                    if (cellEl) {
                        const handle = cellEl.getElement().querySelector(".expand-handle");
                        if (handle) {
                            handle.addEventListener("click", (e) => {
                                e.stopPropagation();
                                detailElement.classList.toggle("hidden");
                                handle.querySelector("i").classList.toggle("fa-caret-right");
                                handle.querySelector("i").classList.toggle("fa-caret-down");
                            });
                        }
                    }
                }
            },
            columns: [
                {
                    title: "Constraints", field: "constraints", hozAlign: "center", width: 150, headerSort: false,
                    formatter: function(cell) {
                        const constraints = cell.getValue() || [];
                        const count = constraints.length;
                        if (count === 0) return "0";
                        return `<span class="expand-handle cursor-pointer text-indigo-600 hover:text-indigo-800"><i class="fas fa-caret-right fa-fw"></i> ${count}</span>`;
                    },
                    sorter: function(a, b){ return (a?.length || 0) - (b?.length || 0); }
                },
                { title: "Order ID", field: "demand.orderId", width: 200, headerFilter: "input" },
                { title: "Seq Num", field: "demand.seqnum", headerFilter: "input" },
                { title: "SKU", field: "demand.sku_id", width: 250, headerFilter: "input" },
                { title: "Qty", field: "demand.qty", hozAlign: "right" },
                { title: "Date", field: "demand.date" },
                { title: "Type", field: "demand.type", headerFilter: "select", headerFilterParams: {values: true} },
            ],
        });
        
    } catch (error) {
        console.error("Error fetching impacted demands:", error);
        contentContainer.innerHTML = `<p class="text-red-500">An error occurred while fetching data.</p>`;
    }
}


// --- Functions from previous steps (unchanged but needed for context) ---
function renderOrderDetails(details, container) {
    container.innerHTML = '';
    if (!details) {
        container.innerHTML = `<p class="text-gray-500">Order not found.</p>`;
        return;
    }
    const tableContainer = document.createElement('div');
    tableContainer.className = 'tabulator-creative';
    container.appendChild(tableContainer);
    const columns = Object.keys(details).map(key => ({
        title: key.replace(/_/g, ' '), field: key, headerHozAlign: "center", hozAlign: "center", resizable: true, headerSort: false,
    }));
    new Tabulator(tableContainer, { data: [details], columns: columns, layout: "fitDataStretch" });
}

function renderConstraintList(constraints, container) {
    if (!constraints || constraints.length === 0) {
        container.innerHTML = `<p class="text-gray-500">No Constraints linked to the order.</p>`;
        return;
    }
    let html = '<ul class="space-y-3">';
    constraints.forEach(constraint => {
        const utilPercent = (constraint.utilization * 100).toFixed(0);
        html += `<li class="p-3 bg-red-50 border border-red-200 rounded-lg"><p class="text-red-700">Resource <code class="text-sm bg-red-200 p-1 rounded">${constraint.resourceId}</code> was <strong class="font-bold">${utilPercent}% utilized</strong> in Week ${constraint.week}.</p></li>`;
    });
    html += '</ul>';
    container.innerHTML = html;
}

// --- Main initialization function ---
export async function renderConstraintCards() {
    const cardsContainer = document.getElementById('ca-cards-container');
    const resultsContainer = document.getElementById('ca-results-container');
    cardsContainer.innerHTML = `<div class="flex justify-center items-center p-8"><i class="fas fa-spinner fa-spin fa-2x text-gray-400"></i></div>`;
    resultsContainer.innerHTML = '';

    try {
        const response = await fetch('/api/constraints/impacted-demands/summary');
        const summary = await response.json();
        
        cardsContainer.innerHTML = `
            <div id="ca-card-bottlenecks" class="bg-white rounded-xl shadow-lg p-4 cursor-pointer hover:shadow-2xl transition-shadow duration-300">
                <p class="text-sm font-medium text-gray-500 uppercase">Bottlenecks</p>
                <p class="text-2xl font-bold text-gray-800">View All</p>
            </div>
            <div id="ca-card-impacted-demands" class="bg-white rounded-xl shadow-lg p-4 cursor-pointer hover:shadow-2xl transition-shadow duration-300">
                <p class="text-sm font-medium text-gray-500 uppercase">Impacted Demands</p>
                <p class="text-2xl font-bold text-orange-500">${summary.orderCount.toLocaleString()}-${(summary.totalQty || 0).toLocaleString()}</p>
            </div>
            <div id="ca-card-order-search" class="bg-white rounded-xl shadow-lg p-4 cursor-pointer hover:shadow-2xl transition-shadow duration-300">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-indigo-500 text-white mr-4"><i class="fas fa-search fa-lg"></i></div>
                    <div>
                        <p class="text-sm font-medium text-gray-500 uppercase">Order</p>
                        <p class="text-2xl font-bold text-gray-800">Search</p>
                    </div>
                </div>
            </div>
        `;

        // Add event listeners
        document.getElementById('ca-card-impacted-demands').addEventListener('click', renderImpactedDemandsTable);
        document.getElementById('ca-card-order-search').addEventListener('click', renderOrderSearchUI);
        document.getElementById('ca-card-bottlenecks').addEventListener('click', () => {
             alert('The Bottlenecks view will be moved here in the next step.');
        });

    } catch (error) {
        console.error("Error fetching constraints summary:", error);
        cardsContainer.innerHTML = `<p class="text-red-500">Could not load constraint cards.</p>`;
    }
}

export function initConstraintAnalysis() {
    renderConstraintCards();
}
import { planConfig } from '../config.js';
import { renderNetworkGraph, fetchResourceNetworkGraph } from './bomViewer.js';

let lastTableRenderFunction = null;

// This helper function creates the popup for managing columns
function createColumnManagerPopup(table, settingsButton) {
    // Close any existing popups first
    document.querySelectorAll('.column-manager-popup').forEach(p => p.remove());

    const popup = document.createElement('div');
    popup.className = 'column-manager-popup';
    
    // Temporarily append to measure its width, then position it
    popup.style.visibility = 'hidden';
    document.body.appendChild(popup);
    const popupWidth = popup.offsetWidth;
    
    const btnRect = settingsButton.getBoundingClientRect();
    let leftPos = btnRect.right + window.scrollX - popupWidth;
    if (leftPos < 10) { // Check if it's going off the left edge
        leftPos = 10;
    }
    popup.style.top = `${btnRect.bottom + window.scrollY + 5}px`;
    popup.style.left = `${leftPos}px`;
    popup.style.visibility = 'visible';

    popup.innerHTML = `<h4>Configure Columns</h4>`;
    const list = document.createElement('ul');

    let draggedItem = null;

    table.getColumns().forEach(column => {
        const item = document.createElement('li');
        item.draggable = true;
        item.dataset.field = column.getField();

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = column.isVisible();
        checkbox.onchange = () => {
            if (checkbox.checked) {
                column.show();
            } else {
                column.hide();
            }
        };

        const label = document.createElement('span');
        label.textContent = column.getDefinition().title;
        
        item.appendChild(checkbox);
        item.appendChild(label);
        list.appendChild(item);

        // Drag and Drop events for reordering
        item.addEventListener('dragstart', () => {
            draggedItem = item;
            setTimeout(() => item.classList.add('dragging'), 0);
        });
        item.addEventListener('dragend', () => {
            setTimeout(() => {
                draggedItem.classList.remove('dragging');
                draggedItem = null;
            }, 0);
        });
        item.addEventListener('dragover', (e) => {
            e.preventDefault();
            const afterElement = [...list.querySelectorAll('li:not(.dragging)')].reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = e.clientY - box.top - box.height / 2;
                return (offset < 0 && offset > closest.offset) ? { offset: offset, element: child } : closest;
            }, { offset: Number.NEGATIVE_INFINITY }).element;
            
            if (afterElement == null) {
                list.appendChild(draggedItem);
            } else {
                list.insertBefore(draggedItem, afterElement);
            }
            
            const originalColumnDefs = table.getColumnDefinitions();
            const columnDefMap = originalColumnDefs.reduce((map, col) => {
                map[col.field] = col;
                return map;
            }, {});
            
            const newOrderOfFields = [...list.querySelectorAll('li')].map(li => li.dataset.field);
            const newColumnDefs = newOrderOfFields.map(field => columnDefMap[field]);

            table.setColumns(newColumnDefs);
        });
    });

    popup.appendChild(list);

    // Close popup if clicking outside
    setTimeout(() => {
        document.addEventListener('click', function closeHandler(e) {
            if (!popup.contains(e.target) && e.target !== settingsButton) {
                popup.remove();
                document.removeEventListener('click', closeHandler);
            }
        });
    }, 0);
}


function createHeaderWithBackButton(title, backFunction, tableInstance = null) {
    const header = document.createElement('div');
    header.className = 'flex justify-between items-center mb-4';
    
    const titleEl = document.createElement('h2');
    titleEl.className = 'text-xl font-bold text-gray-800';
    titleEl.textContent = title;
    
    const buttonGroup = document.createElement('div');
    buttonGroup.className = 'flex items-center space-x-2';

    // Add settings button if a table instance is provided
    if (tableInstance) {
        const settingsButton = document.createElement('button');
        settingsButton.className = 'flex items-center p-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors';
        settingsButton.title = 'Configure Columns';
        settingsButton.innerHTML = `<i class="fas fa-cog"></i>`;
        settingsButton.onclick = (e) => {
            e.stopPropagation();
            createColumnManagerPopup(tableInstance, settingsButton);
        };
        buttonGroup.appendChild(settingsButton);
    }

    if (backFunction) {
        const backButton = document.createElement('button');
        backButton.className = 'flex items-center p-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors';
        backButton.title = 'Back';
        backButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3" /></svg>`;
        backButton.addEventListener('click', backFunction);
        buttonGroup.appendChild(backButton);
    }
    
    header.appendChild(titleEl);
    header.appendChild(buttonGroup);
    return header;
}

function createResourceTable(title, data, messageIfEmpty, backFunction, showDashboardContent) {
    const resultsContainer = document.getElementById('results-container');
    const renderFunc = () => {
        lastTableRenderFunction = renderFunc;
        resultsContainer.innerHTML = ''; 
        
        if (!data || data.length === 0) {
            resultsContainer.appendChild(createHeaderWithBackButton(title, backFunction));
            resultsContainer.innerHTML += `<p class="text-gray-500">${messageIfEmpty}</p>`;
            return;
        }

        const tableContainer = document.createElement('div');
        tableContainer.className = 'tabulator-creative';
        
        const tableData = data.map(node => node.properties);
        const allKeys = new Set(data.flatMap(node => Object.keys(node.properties)));
        const sortedKeys = ['res_id', ...Array.from(allKeys).filter(key => key !== 'res_id').sort()];

        const columns = sortedKeys.map(key => {
            const columnDef = {
                title: key.replace(/_/g, ' '),
                field: key,
                headerHozAlign: "center",
                hozAlign: "center",
                resizable: true,
                headerSort: true,
            };

            if (key === 'res_id') {
                columnDef.formatter = function(cell) {
                    const resId = cell.getValue();
                    const container = document.createElement("div");
                    container.classList.add("flex", "items-center", "justify-center", "space-x-2");
                    container.innerHTML = `<span>${resId}</span>`;
                    
                    const button = document.createElement("button");
                    button.classList.add("resource-network-btn", "px-2", "py-1", "bg-cyan-500", "text-white", "rounded-lg", "text-xs", "hover:bg-cyan-600");
                    button.dataset.resId = resId;
                    button.textContent = "Show Network";
                    button.onclick = (e) => {
                        e.stopPropagation();
                        const networkTitle = `Network for Resource ${resId}`;
                        resultsContainer.innerHTML = '';
                        resultsContainer.appendChild(createHeaderWithBackButton(networkTitle, renderFunc));
                        fetchResourceNetworkGraph(resId, networkTitle, resultsContainer);
                        showDashboardContent(resultsContainer);
                    };
                    container.appendChild(button);
                    return container;
                };
            }
            return columnDef;
        });

        resultsContainer.appendChild(tableContainer);
        const table = new Tabulator(tableContainer, { // Create table instance
            data: tableData,
            columns: columns,
            layout: "fitDataStretch",
            movableColumns: true,
            classes: "tabulator-creative",
            persistence: {
                sort: true,
                columns: true,
            },
            persistenceID: `dashboard-table-${title.replace(/\s+/g, '-')}`,
        });
        
        // Add header after table is initialized to pass the instance
        resultsContainer.prepend(createHeaderWithBackButton(title, backFunction, table));
    };
    renderFunc();
}

function createSkuTable(title, data, messageIfEmpty, backFunction, showDashboardContent) {
    const resultsContainer = document.getElementById('results-container');
    const renderFunc = () => {
        lastTableRenderFunction = renderFunc;
        resultsContainer.innerHTML = '';

        if (!data || data.length === 0) {
            resultsContainer.appendChild(createHeaderWithBackButton(title, backFunction));
            resultsContainer.innerHTML += `<p class="text-gray-500">${messageIfEmpty}</p>`;
            return;
        }

        const tableContainer = document.createElement('div');
        tableContainer.className = 'tabulator-creative';

        const tableData = data.map(node => node.properties);
        const allKeys = new Set(data.flatMap(node => Object.keys(node.properties)));
        const keysToDisplay = Array.from(allKeys).filter(key => key !== 'shortest_lead_time');
        const sortedKeys = keysToDisplay.sort((a, b) => {
            const order = ['sku_id', 'item', 'loc'];
            const aIndex = order.indexOf(a);
            const bIndex = order.indexOf(b);
            if (aIndex !== -1 && bIndex !== -1) return aIndex - bIndex;
            if (aIndex !== -1) return -1;
            if (bIndex !== -1) return 1;
            return a.localeCompare(b);
        });

        const columns = sortedKeys.map(key => {
            const columnDef = {
                title: key.replace(/_/g, ' '),
                field: key,
                headerHozAlign: "center",
                hozAlign: "center",
                resizable: true,
                headerSort: true,
            };

            const buttonFormatter = (cell, text, style, action) => {
                const value = cell.getValue();
                if (!value || value <= 0) return `<span>${value || 0}</span>`;

                const skuId = cell.getRow().getData().sku_id;
                const container = document.createElement("div");
                container.classList.add("flex", "items-center", "justify-center", "space-x-2");
                container.innerHTML = `<span>${value}</span>`;
                
                const button = document.createElement("button");
                button.className = `px-2 py-1 text-white rounded-lg text-xs ${style}`;
                button.dataset.skuId = skuId;
                button.textContent = text;
                button.onclick = (e) => {
                    e.stopPropagation();
                    action(skuId, showDashboardContent);
                };
                container.appendChild(button);
                return container;
            };

            if (key === 'sku_id') {
                columnDef.formatter = function(cell) {
                    const skuId = cell.getValue();
                    const container = document.createElement("div");
                    container.classList.add("flex", "items-center", "justify-center", "space-x-2");
                    container.innerHTML = `<span>${skuId}</span>`;
                    
                    const button = document.createElement("button");
                    button.className = "px-2 py-1 bg-blue-500 text-white rounded-lg text-xs hover:bg-blue-600";
                    button.dataset.skuId = skuId;
                    button.textContent = "Show Network";
                    button.onclick = (e) => {
                        e.stopPropagation();
                        fetch('http://127.0.0.1:5000/api/network-graph', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ sku_id: skuId }) })
                            .then(r => r.json())
                            .then(d => {
                                const networkTitle = `Network for ${skuId}`;
                                resultsContainer.innerHTML = '';
                                resultsContainer.appendChild(createHeaderWithBackButton(networkTitle, renderFunc));
                                renderNetworkGraph(skuId, d, networkTitle, resultsContainer, null);
                            });
                        showDashboardContent(resultsContainer);
                    };
                    container.appendChild(button);
                    return container;
                };
            } 
            else if (key === 'cust_demand_qty') {
                columnDef.formatter = cell => buttonFormatter(cell, "Show CO", "bg-red-500 hover:bg-red-600", renderAffectedCustOrdersForSku);
            } else if (key === 'fcst_demand_qty') {
                columnDef.formatter = cell => buttonFormatter(cell, "Show FO", "bg-orange-500 hover:bg-orange-600", renderAffectedFcstOrdersForSku);
            }
            return columnDef;
        });

        resultsContainer.appendChild(tableContainer);
        const table = new Tabulator(tableContainer, {
            data: tableData,
            columns: columns,
            layout: "fitDataStretch",
            movableColumns: true,
            classes: "tabulator-creative",
            persistence: {
                sort: true,
                columns: true,
            },
            persistenceID: `dashboard-table-${title.replace(/\s+/g, '-')}`,
        });
        
        resultsContainer.prepend(createHeaderWithBackButton(title, backFunction, table));
    };
    renderFunc();
}

// ## MODIFICATION START ##
function createOrderTable(title, data, messageIfEmpty, backFunction) {
    const resultsContainer = document.getElementById('results-container');
    const renderFunc = () => {
        lastTableRenderFunction = renderFunc;
        resultsContainer.innerHTML = '';
        
        if (!data || data.length === 0) {
            resultsContainer.appendChild(createHeaderWithBackButton(title, backFunction));
            resultsContainer.innerHTML += `<p class="text-gray-500">${messageIfEmpty}</p>`;
            return;
        }
        
        const tableContainer = document.createElement('div');
        tableContainer.className = 'tabulator-creative';

        const tableData = data.map(record => record.properties.full_record);
        
        // Define the preferred column orders
        const customerOrderSequence = ['OrderID', 'Item', 'Loc', 'RGID', 'CGID', 'Delivery Date', 'Ship date WW', 'Ship Date'];
        const forecastOrderSequence = ['Seqnum', 'Item', 'ItemClass', 'U CAPACITY CORRIDOR', 'Loc', 'Dmd Group', 'Cust Tier', 'Priority', 'Intel WW', 'Qty', 'Descr'];

        let preferredOrder = [];
        if (title.toLowerCase().includes('customer')) {
            preferredOrder = customerOrderSequence;
        } else if (title.toLowerCase().includes('forecast')) {
            preferredOrder = forecastOrderSequence;
        }

        const allKeys = Object.keys(tableData[0]);
        const preferredKeysInOrder = preferredOrder.filter(key => allKeys.includes(key));
        const remainingKeys = allKeys
            .filter(key => !preferredOrder.includes(key))
            .sort((a, b) => a.localeCompare(b));
        
        const finalKeyOrder = [...preferredKeysInOrder, ...remainingKeys];
        
        const columns = finalKeyOrder.map(key => ({
            title: key.replace(/_/g, ' '),
            field: key,
            headerHozAlign: "center",
            hozAlign: "center",
            resizable: true,
            headerSort: true,
        }));
        
        resultsContainer.appendChild(tableContainer);
        const table = new Tabulator(tableContainer, {
            data: tableData,
            columns: columns,
            layout: "fitDataStretch",
            movableColumns: true,
            classes: "tabulator-creative",
            persistence: {
                sort: true,
                columns: true,
            },
            persistenceID: `dashboard-table-${title.replace(/\s+/g, '-')}`,
        });
        
        resultsContainer.prepend(createHeaderWithBackButton(title, backFunction, table));
    };
    renderFunc();
}
// ## MODIFICATION END ##

const renderAffectedCustOrdersForSku = (skuId, showDashboardContent) => {
    fetch('http://127.0.0.1:5000/api/affected-cust-orders-by-sku', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sku_id: skuId })
    })
    .then(r => r.json())
    .then(d => { 
        createOrderTable(`Customer Orders for ${skuId}`, d, 'No affected customer orders found.', lastTableRenderFunction); 
        showDashboardContent(document.getElementById('results-container')); 
    });
};

const renderAffectedFcstOrdersForSku = (skuId, showDashboardContent) => {
    fetch('http://127.0.0.1:5000/api/affected-fcst-orders-by-sku', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sku_id: skuId })
    })
    .then(r => r.json())
    .then(d => { 
        createOrderTable(`Forecast Orders for ${skuId}`, d, 'No affected forecast orders found.', lastTableRenderFunction); 
        showDashboardContent(document.getElementById('results-container')); 
    });
};

const setCardsState = (isExpanded) => {
    const mainCardsContainer = document.getElementById('main-cards-container');
    const toggleCardsBtn = document.getElementById('toggle-cards-btn');
    const collapseIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" /></svg>`;
    const expandIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" /></svg>`;

    if (isExpanded) {
        mainCardsContainer.classList.remove('hidden');
        toggleCardsBtn.innerHTML = collapseIcon;
        localStorage.setItem('cardsState', 'expanded');
    } else {
        mainCardsContainer.classList.add('hidden');
        toggleCardsBtn.innerHTML = expandIcon;
        localStorage.setItem('cardsState', 'collapsed');
    }
};

export function fetchDashboardData(startDate = null, endDate = null) {
    if (startDate && endDate) {
        console.log(`Fetching dashboard data for quarter: ${startDate} to ${endDate}`);
    } else {
        console.log("Fetching all dashboard data (no quarter filter).");
    }

    fetch('http://127.0.0.1:5000/api/dashboard')
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from dashboard API:", data.error);
                return; 
            }

            document.getElementById('total-demand-at-risk').textContent = `$${(data.totalDemandAtRisk || 0).toLocaleString()}`;
            const formattedQty = (data.affectedOrdersQty || 0).toLocaleString();
            document.getElementById('affected-orders').textContent = `${(data.affectedOrdersCount || 0).toLocaleString()} - ${formattedQty}`;
            const formattedCustQty = (data.affectedCustOrdersQty || 0).toLocaleString();
            document.getElementById('cust-orders-count').textContent = `${(data.affectedCustOrdersCount || 0).toLocaleString()} - ${formattedCustQty}`;
            const formattedFcstQty = (data.affectedFcstOrdersQty || 0).toLocaleString();
            document.getElementById('fcst-orders-count').textContent = `${(data.affectedFcstOrdersCount || 0).toLocaleString()} - ${formattedFcstQty}`;
            document.getElementById('broken-networks').textContent = (data.brokenSkusCount || 0).toLocaleString();
            document.getElementById('broken-skus-count').textContent = (data.brokenSkusCount || 0).toLocaleString();
            document.getElementById('broken-fg-networks-count').textContent = (data.brokenFgNetworksCount || 0).toLocaleString();
            const totalBottlenecks = (data.bottleneckResourcesCount || 0) + (data.bottleneckSkusCount || 0);
            document.getElementById('bottlenecks-count').textContent = totalBottlenecks.toLocaleString();
            document.getElementById('bottleneck-resources-count').textContent = (data.bottleneckResourcesCount || 0).toLocaleString();
            document.getElementById('bottleneck-skus-count').textContent = (data.bottleneckSkusCount || 0).toLocaleString();
        })
        .catch(error => console.error('Error fetching dashboard data:', error));
}

let isQuarterFilterExpanded = false;

function generateQuarters(startDateString, count) {
    const quarters = [];
    const startDate = new Date(startDateString + 'T00:00:00Z');
    
    const startMonth = startDate.getUTCMonth();
    const startQuarterMonth = Math.floor(startMonth / 3) * 3;
    const currentDate = new Date(Date.UTC(startDate.getUTCFullYear(), startQuarterMonth, 1));

    for (let i = 0; i < count; i++) {
        const year = currentDate.getUTCFullYear();
        const quarterNum = Math.floor(currentDate.getUTCMonth() / 3) + 1;
        
        const qStartDate = new Date(Date.UTC(year, (quarterNum - 1) * 3, 1));
        const qEndDate = new Date(Date.UTC(year, quarterNum * 3, 0));

        quarters.push({
            name: `Q${quarterNum}`,
            year: year,
            startDate: qStartDate.toISOString().split('T')[0],
            endDate: qEndDate.toISOString().split('T')[0]
        });
        
        currentDate.setUTCMonth(currentDate.getUTCMonth() + 3);
    }
    return quarters;
}

function renderActiveQuarterDisplay() {
    const quarterFilterContainer = document.getElementById('quarter-filter-container');
    const activeBtn = quarterFilterContainer.querySelector('.active');
    const activeDisplay = document.createElement('div');
    activeDisplay.className = 'active-display';

    if (activeBtn.dataset.filterType === 'all') {
        activeDisplay.innerHTML = `<button class="quarter-filter-btn active font-semibold py-1 px-3 rounded-md text-sm w-full text-left">ALL</button>`;
    } else {
        const year = new Date(activeBtn.dataset.startDate + 'T00:00:00Z').getUTCFullYear();
        activeDisplay.innerHTML = `
            <span class="year-label font-bold text-gray-500 text-sm mr-1">'${year.toString().substring(2)}</span>
            <button class="quarter-filter-btn active font-semibold py-1 px-3 rounded-md text-sm">${activeBtn.textContent}</button>
        `;
    }
    
    const existingDisplay = quarterFilterContainer.querySelector('.active-display');
    if (existingDisplay) {
        existingDisplay.remove();
    }
    quarterFilterContainer.prepend(activeDisplay);
}

function renderQuarterFilterBar() {
    const quarterFilterContainer = document.getElementById('quarter-filter-container');
    quarterFilterContainer.innerHTML = '';
    let currentYear = null;

    const allButton = document.createElement('button');
    allButton.textContent = 'ALL';
    allButton.className = 'quarter-filter-btn active font-semibold py-1 px-3 rounded-md text-sm';
    allButton.dataset.filterType = 'all';
    quarterFilterContainer.appendChild(allButton);

    const quarters = generateQuarters(planConfig.planStartDate, planConfig.numberOfQuarters);
    quarters.forEach(q => {
        if (q.year !== currentYear) {
            currentYear = q.year;
            const yearLabel = document.createElement('span');
            yearLabel.className = 'font-bold text-gray-500 text-sm ml-2 mr-1 w-full md:w-auto';
            yearLabel.textContent = `'${currentYear.toString().substring(2)}`;
            quarterFilterContainer.appendChild(yearLabel);
        }

        const qButton = document.createElement('button');
        qButton.textContent = q.name;
        qButton.className = 'quarter-filter-btn font-semibold py-1 px-3 rounded-md text-sm';
        qButton.dataset.startDate = q.startDate;
        qButton.dataset.endDate = q.endDate;
        qButton.dataset.filterType = 'quarter';
        quarterFilterContainer.appendChild(qButton);
    });
    renderActiveQuarterDisplay();
}

function toggleQuarterFilter(expand) {
    const quarterFilterBar = document.getElementById('quarter-filter-bar');
    isQuarterFilterExpanded = expand;
    if (isQuarterFilterExpanded) {
        quarterFilterBar.classList.add('expanded');
        quarterFilterBar.classList.remove('collapsed');
    } else {
        quarterFilterBar.classList.remove('expanded');
        quarterFilterBar.classList.add('collapsed');
        renderActiveQuarterDisplay();
    }
}

export function initDashboard(showDashboardContent) {
    const toggleCardsBtn = document.getElementById('toggle-cards-btn');
    const mainCardsContainer = document.getElementById('main-cards-container');
    const quarterFilterBar = document.getElementById('quarter-filter-bar');
    const quarterFilterContainer = document.getElementById('quarter-filter-container');

    // --- Main Cards Toggle Initialization ---
    toggleCardsBtn.addEventListener('click', () => {
        const isCurrentlyExpanded = !mainCardsContainer.classList.contains('hidden');
        setCardsState(!isCurrentlyExpanded);
    });
    const savedCardsState = localStorage.getItem('cardsState');
    setCardsState(savedCardsState !== 'collapsed');

    // --- Quarter Filter Initialization ---
    renderQuarterFilterBar();
    
    quarterFilterBar.addEventListener('click', (event) => {
        if (!isQuarterFilterExpanded) {
            toggleQuarterFilter(true);
            return;
        }

        const clickedButton = event.target.closest('button');
        if (clickedButton && !clickedButton.classList.contains('active')) {
            quarterFilterContainer.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
            clickedButton.classList.add('active');

            const { filterType, startDate, endDate } = clickedButton.dataset;
            fetchDashboardData(filterType === 'all' ? null : startDate, filterType === 'all' ? null : endDate);
            
            setTimeout(() => toggleQuarterFilter(false), 100);
        }
    });

    document.addEventListener('click', (event) => {
        if (isQuarterFilterExpanded && !quarterFilterBar.contains(event.target)) {
            toggleQuarterFilter(false);
        }
    });

    // --- Drill-down Card Event Listeners ---
    const brokenNetworksCard = document.getElementById('broken-networks-card');
    const bottlenecksCard = document.getElementById('bottlenecks-card');
    const affectedOrdersCard = document.getElementById('affected-orders-card');
    const brokenSkuCard = document.getElementById('broken-sku-card');
    const brokenDemandNetworkCard = document.getElementById('broken-demand-network-card');
    const bottleneckResourcesCard = document.getElementById('bottleneck-resources-card');
    const bottleneckSkusCard = document.getElementById('bottleneck-skus-card');
    const custOrdersCard = document.getElementById('cust-orders-card');
    const fcstOrdersCard = document.getElementById('fcst-orders-card');
    
    const resultsContainer = document.getElementById('results-container');
    const brokenNetworksSection = document.getElementById('broken-networks-section');
    const bottlenecksSubcardsSection = document.getElementById('bottlenecks-subcards-section');
    const affectedOrdersSection = document.getElementById('affected-orders-section');
    
    brokenNetworksCard.addEventListener('click', () => showDashboardContent(brokenNetworksSection));
    bottlenecksCard.addEventListener('click', () => showDashboardContent(bottlenecksSubcardsSection));
    affectedOrdersCard.addEventListener('click', () => showDashboardContent(affectedOrdersSection));
    
    const renderBrokenSkus = () => fetch('http://127.0.0.1:5000/api/broken-networks').then(r => r.json()).then(d => { createSkuTable('Broken SKUs', d, 'No broken SKUs found.', () => showDashboardContent(brokenNetworksSection), showDashboardContent); showDashboardContent(resultsContainer); });
    const renderBottleneckResources = () => fetch('http://127.0.0.1:5000/api/bottleneck-resources').then(r => r.json()).then(d => { createResourceTable('Bottleneck Resources', d, 'No bottlenecked resources found.', () => showDashboardContent(bottlenecksSubcardsSection), showDashboardContent); showDashboardContent(resultsContainer); });
    const renderBottleneckSkus = () => fetch('http://127.0.0.1:5000/api/bottleneck-skus').then(r => r.json()).then(d => { createSkuTable('Bottleneck SKUs', d, 'No bottlenecked SKUs found.', () => showDashboardContent(bottlenecksSubcardsSection), showDashboardContent); showDashboardContent(resultsContainer); });
    const renderBrokenDemand = () => fetch('http://127.0.0.1:5000/api/broken-demand-networks').then(r => r.json()).then(d => { createSkuTable('Broken Finished Goods', d, 'No broken FG networks found.', () => showDashboardContent(brokenNetworksSection), showDashboardContent); showDashboardContent(resultsContainer); });
    const renderAffectedCustOrders = () => fetch('http://127.0.0.1:5000/api/affected-cust-orders').then(r => r.json()).then(d => { createOrderTable('Affected Customer Orders', d, 'No affected customer orders found.', () => showDashboardContent(affectedOrdersSection)); showDashboardContent(resultsContainer); });
    const renderAffectedFcstOrders = () => fetch('http://127.0.0.1:5000/api/affected-fcst-orders').then(r => r.json()).then(d => { createOrderTable('Affected Forecast Orders', d, 'No affected forecast orders found.', () => showDashboardContent(affectedOrdersSection)); showDashboardContent(resultsContainer); });
    
    brokenSkuCard.addEventListener('click', renderBrokenSkus);
    bottleneckResourcesCard.addEventListener('click', renderBottleneckResources);
    bottleneckSkusCard.addEventListener('click', renderBottleneckSkus);
    brokenDemandNetworkCard.addEventListener('click', renderBrokenDemand);
    custOrdersCard.addEventListener('click', renderAffectedCustOrders);
    fcstOrdersCard.addEventListener('click', renderAffectedFcstOrders);
}
// ui/news.js

const newsMatrixSection = document.getElementById('news-matrix-section');
const kpiHeaders = ["Supply Availability", "Raw Material Cost", "Logistics & Freight Cost", "Market Demand", "OTIF"];

const KPI_BG_COLORS = {
    Positive: 'bg-green-50',
    Negative: 'bg-red-50',
    Neutral: 'bg-white'
};

function createKpiCellHtml(impact) {
    const safeImpact = (impact === 'Positive' || impact === 'Negative') ? impact : 'Neutral';
    const indicatorClass = `indicator-${safeImpact.toLowerCase()}`;
    
    if (safeImpact === 'Neutral') {
        return `<span class="indicator-neutral">-</span>`;
    }
    
    const path = safeImpact === 'Positive' ? 'M12 4l8 8H4l8-8z' : 'M12 20l-8-8h16l-8 8z';
    return `<svg class="h-4 w-4 inline-block ${indicatorClass}" fill="currentColor" viewBox="0 0 24 24">
                <path d="${path}"></path>
            </svg>`;
}

function renderNewsMatrix(allArticles) {
    newsMatrixSection.innerHTML = '';
    if (!allArticles || allArticles.length === 0) {
        newsMatrixSection.innerHTML = `<p class="text-gray-500 p-4">No news articles found.</p>`;
        return;
    }

    const table = document.createElement('table');
    table.id = 'news-matrix-table';
    table.className = 'min-w-full';
    
    const thead = document.createElement('thead');
    thead.innerHTML = `<tr>
        <th class="article-column">Article</th>
        <th class="category-column">Category</th>
        ${kpiHeaders.map(name => `<th class="kpi-column">${name}</th>`).join('')}
    </tr>`;
    
    const tbody = document.createElement('tbody');
    allArticles.forEach((article, index) => {
        const row = document.createElement('tr');
        row.id = `article-row-${index}`;
        
        const articleCell = document.createElement('td');
        articleCell.className = 'article-column article-title-cell';
        articleCell.innerHTML = `<a href="${article.url}" target="_blank" rel="noopener noreferrer">${article.title}</a>`;
        row.appendChild(articleCell);

        const categoryCell = document.createElement('td');
        categoryCell.className = 'category-column';
        categoryCell.textContent = article.category.charAt(0).toUpperCase() + article.category.slice(1);
        row.appendChild(categoryCell);

        kpiHeaders.forEach(header => {
            const kpiCell = document.createElement('td');
            kpiCell.className = 'kpi-cell kpi-column';
            kpiCell.id = `kpi-placeholder-matrix-${index}-${header.replace(/\s+/g, '')}`;
            kpiCell.innerHTML = `<div class="kpi-loader-small"></div>`;
            row.appendChild(kpiCell);
        });

        tbody.appendChild(row);
    });

    table.appendChild(thead);
    table.appendChild(tbody);
    newsMatrixSection.appendChild(table);
}

function updateMatrixCells(matrixIndex, kpiData) {
    kpiHeaders.forEach(header => {
        const matrixCell = document.getElementById(`kpi-placeholder-matrix-${matrixIndex}-${header.replace(/\s+/g, '')}`);
            if (matrixCell) {
                const impact = kpiData[header] || 'Neutral';
                matrixCell.className = `kpi-cell kpi-column ${KPI_BG_COLORS[impact]}`;
                matrixCell.innerHTML = createKpiCellHtml(impact);
            }
    });
}

async function fetchAndDisplayNews() {
    try {
        const response = await fetch('http://127.0.0.1:5000/api/supply-chain-news');
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const newsData = await response.json();
        
        const allArticles = [];
        let matrixIndexCounter = 0;
        for (const category in newsData) {
            newsData[category].forEach(article => {
                allArticles.push({
                    ...article,
                    category: category,
                    matrixIndex: matrixIndexCounter
                });
                matrixIndexCounter++;
            });
        }

        renderNewsMatrix(allArticles);

        allArticles.forEach(article => {
            fetch('http://127.0.0.1:5000/api/analyze-article', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ article: article })
            })
            .then(res => res.json())
            .then(kpiData => {
                const allNeutral = Object.values(kpiData).every(val => val === 'Neutral');

                if (allNeutral) {
                    const row = document.getElementById(`article-row-${article.matrixIndex}`);
                    if (row) row.style.display = 'none';
                } else {
                    updateMatrixCells(article.matrixIndex, kpiData);
                }
            })
            .catch(err => console.error("Error analyzing article:", article.title, err));
        });

    } catch (error) {
        console.error('Error fetching or displaying news:', error);
        newsMatrixSection.innerHTML = `<div class="p-4"><h4 class="font-bold text-gray-800">News Feed</h4><p class="text-sm text-red-500">Could not load news feed. Please ensure the backend server is running.</p></div>`;
    }
}

export function initNews() {
    fetchAndDisplayNews();
}
// ui/sidebar.js

/**
 * Sets the collapsed or expanded state of the sidebar and main content area.
 * @param {boolean} isExpanded - True to expand the sidebar, false to collapse.
 */
const setSidebarState = (isExpanded) => {
    const sidebar = document.getElementById('sidebar');
    const mainContent = document.getElementById('main-content');

    if (isExpanded) {
        sidebar.classList.add('expanded');
        mainContent.classList.add('expanded');
        localStorage.setItem('sidebarState', 'expanded');
    } else {
        sidebar.classList.remove('expanded');
        mainContent.classList.remove('expanded');
        localStorage.setItem('sidebarState', 'collapsed');
    }
};

/**
 * Initializes all sidebar functionality, including event listeners and loading the saved state.
 */
export function initSidebar() {
    const logoFull = document.getElementById('logo-full');
    const logoShort = document.getElementById('logo-short');
    
    logoFull.addEventListener('click', () => setSidebarState(false));
    logoShort.addEventListener('click', () => setSidebarState(true));

    const savedState = localStorage.getItem('sidebarState');
    if (savedState === 'expanded') {
        setSidebarState(true);
    } else {
        setSidebarState(false);
    }
}
